// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Domain.Models;

public partial class MYGAMEContext : DbContext
{
    public MYGAMEContext(DbContextOptions<MYGAMEContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Form> Form { get; set; }

    public virtual DbSet<FormTask> FormTask { get; set; }

    public virtual DbSet<IssueCategories> IssueCategories { get; set; }

    public virtual DbSet<Log_Rel_User_Categories> Log_Rel_User_Categories { get; set; }

    public virtual DbSet<Member> Member { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<RelCategoriesProduct> RelCategoriesProduct { get; set; }

    public virtual DbSet<Rel_User_Categories> Rel_User_Categories { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<SystemConfig> SystemConfig { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<Word> Word { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Form>(entity =>
        {
            entity.Property(e => e.ClosedTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(512);
            entity.Property(e => e.ModifiredTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormTask>(entity =>
        {
            entity.HasKey(e => e.TaskId);

            entity.Property(e => e.ApproveTime).HasColumnType("datetime");
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaskName)
                .IsRequired()
                .HasMaxLength(512);

            entity.HasOne(d => d.Assignment).WithMany(p => p.FormTask)
                .HasForeignKey(d => d.AssignmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FormTask_User");

            entity.HasOne(d => d.Form).WithMany(p => p.FormTask)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FormTask_Form");
        });

        modelBuilder.Entity<IssueCategories>(entity =>
        {
            entity.HasKey(e => e.IssueCategoriesId).HasName("PK_IssueCategoiries");

            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IssueCategoriesName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Log_Rel_User_Categories>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.IsVip).HasDefaultValue(true);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(512);
        });

        modelBuilder.Entity<RelCategoriesProduct>(entity =>
        {
            entity.HasKey(e => new { e.IssueCategoriesId, e.ProductId }).HasName("PK_rel_Categories_Product");

            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.DeleteFlag)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.IssueCategories).WithMany(p => p.RelCategoriesProduct)
                .HasForeignKey(d => d.IssueCategoriesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelCategoriesProduct_IssueCategoriies");

            entity.HasOne(d => d.Product).WithMany(p => p.RelCategoriesProduct)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelCategoriesProduct_Products");
        });

        modelBuilder.Entity<Rel_User_Categories>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.IssueCategoriesId });

            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(true);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.IssueCategories).WithMany(p => p.Rel_User_Categories)
                .HasForeignKey(d => d.IssueCategoriesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_User_Categories_Categories");

            entity.HasOne(d => d.User).WithMany(p => p.Rel_User_Categories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_User_Categories_User");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<SystemConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigCode);

            entity.Property(e => e.ConfigCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfigType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfigValue)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Word>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Word1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Word");

            entity.HasOne(d => d.User).WithMany(p => p.Word)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Word_Member1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}